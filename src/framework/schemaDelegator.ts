import { delegateToSchema } from 'graphql-tools';
import { GraphQLResolveInfo, GraphQLSchema } from 'graphql';
import {
    Resolver,
    QueryResolvers,
    MutationResolvers,
} from '../../generated/graphql';

export type SchemaDelegationContext = {
    schemaDelegator: InstanceType<typeof SchemaDelegator>;
};

/**
 * @summary Type-safe schema delegation to a GraphQL schema.
 *          Enables Magento extensions to delegate to queries/mutations
 *          contributed by other extensions
 */
export class SchemaDelegator {
    constructor(private schema: GraphQLSchema) {}

    delegate<
        TOperation extends 'query' | 'mutation',
        TFields extends TOperation extends 'query'
            ? keyof QueryResolvers
            : keyof MutationResolvers
    >(
        operation: TOperation,
        opts: {
            fieldName: TFields;
            args: ExtractArgsFromResolver<GetResolverType<TFields>>;
            info: GraphQLResolveInfo;
            // TODO: Exposing transforms will break type-safely, and is frankly
            // more low-level than I'd like. We should find something better
            transforms?: any;
        },
    ) {
        return delegateToSchema({
            ...opts,
            schema: this.schema,
            operation,
        }) as ExtractResultFromResolver<GetResolverType<TFields>>;
    }
}

/**
 * @summary Get a resolver type generated by graphql-code-generator
 */
type GetResolverType<
    T extends keyof QueryResolvers | keyof MutationResolvers
> = T extends keyof QueryResolvers
    ? QueryResolvers[T]
    : T extends keyof MutationResolvers
    ? MutationResolvers[T]
    : never;

/**
 * @summary Get a union of all values in an interface/type alias
 */
type ValueOf<T> = T[keyof T];

/**
 * @summary: Extract the arguments type from a resolver type generated
 *           by graphql-code-generator
 */
type ExtractArgsFromResolver<
    T extends ValueOf<QueryResolvers> | ValueOf<MutationResolvers>
> = T extends Resolver<
    infer TResult,
    infer TParent,
    infer TContext,
    infer TArgs
>
    ? TArgs
    : never;

/**
 * @summary: Extract the result type from a resolver type generated
 *           by graphql-code-generator
 */
type ExtractResultFromResolver<
    T extends ValueOf<QueryResolvers> | ValueOf<MutationResolvers>
> = T extends Resolver<
    infer TResult,
    infer TParent,
    infer TContext,
    infer TArgs
>
    ? TResult
    : never;
